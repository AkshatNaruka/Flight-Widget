"use client"

import { useState } from "react"
import { Search, MapPin, Clock, Plane, Building2, ExternalLink } from "lucide-react"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Airport, Flight } from "@/types"

interface AirportInfoProps {
  onSearch: (iataCode: string) => void
  isLoading?: boolean
  airport?: Airport | null
  departures?: Flight[]
  error?: string
}

function AirportDetails({ airport }: { airport: Airport }) {
  return (
    <Card>
      <CardHeader>
        <CardTitle className="flex items-center space-x-2">
          <Building2 className="h-5 w-5" />
          <span>{airport.name}</span>
        </CardTitle>
        <CardDescription>
          {airport.code}
        </CardDescription>
      </CardHeader>
      <CardContent className="space-y-4">
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div className="space-y-3">
            <div className="flex items-start space-x-2">
              <MapPin className="h-4 w-4 text-gray-500 mt-0.5" />
              <div>
                <p className="font-medium">Location</p>
                <p className="text-sm text-gray-600">
                  {airport.city}, {airport.country}
                </p>
                {airport.coordinates && (
                  <p className="text-xs text-gray-500">
                    {airport.coordinates.lat.toFixed(4)}°N, {airport.coordinates.lng.toFixed(4)}°E
                  </p>
                )}
              </div>
            </div>
            
            {airport.timezone && (
              <div className="flex items-start space-x-2">
                <Clock className="h-4 w-4 text-gray-500 mt-0.5" />
                <div>
                  <p className="font-medium">Timezone</p>
                  <p className="text-sm text-gray-600">{airport.timezone}</p>
                  <p className="text-xs text-gray-500">
                    Local time: {new Date().toLocaleTimeString([], { 
                      timeZone: airport.timezone,
                      hour: '2-digit', 
                      minute: '2-digit',
                      timeZoneName: 'short'
                    })}
                  </p>
                </div>
              </div>
            )}
          </div>
          
          <div className="space-y-3">
            <div className="flex items-start space-x-2">
              <ExternalLink className="h-4 w-4 text-gray-500 mt-0.5" />
              <div>
                <p className="font-medium">Airport Code</p>
                <p className="text-sm text-gray-600">
                  IATA: {airport.code}
                </p>
              </div>
            </div>
          </div>
        </div>
      </CardContent>
    </Card>
  )
}

function DeparturesList({ departures }: { departures: Flight[] }) {
  if (departures.length === 0) {
    return (
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center space-x-2">
            <Plane className="h-5 w-5" />
            <span>Live Departures</span>
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="text-center py-8 text-gray-500">
            <Plane className="h-12 w-12 mx-auto mb-4 text-gray-300" />
            <p>No departure information available</p>
            <p className="text-sm">Live departure data may not be available for all airports</p>
          </div>
        </CardContent>
      </Card>
    )
  }

  return (
    <Card>
      <CardHeader>
        <CardTitle className="flex items-center space-x-2">
          <Plane className="h-5 w-5" />
          <span>Live Departures ({departures.length})</span>
        </CardTitle>
        <CardDescription>
          Real-time departure information
        </CardDescription>
      </CardHeader>
      <CardContent>
        <div className="space-y-3">
          {departures.slice(0, 10).map((flight, index) => (
            <div key={`departure-${index}`} className="flex items-center justify-between py-3 border-b last:border-b-0">
              <div className="flex-1">
                <div className="flex items-center space-x-3">
                  <div className="flex-1">
                    <p className="font-medium">{flight.callsign || flight.flight_iata || "Unknown"}</p>
                    {flight.airline && (
                      <p className="text-sm text-gray-600">
                        {typeof flight.airline === 'string' ? flight.airline : flight.airline.name}
                      </p>
                    )}
                  </div>
                  <div className="text-right">
                    <p className="font-medium">{flight.destination_iata || "Unknown"}</p>
                    {flight.destination_airport && (
                      <p className="text-sm text-gray-600 max-w-48 truncate">{flight.destination_airport}</p>
                    )}
                  </div>
                </div>
              </div>
              <div className="ml-4 text-right">
                {flight.departure_scheduled ? (
                  <>
                    <p className="font-medium">
                      {new Date(flight.departure_scheduled).toLocaleTimeString([], { 
                        hour: '2-digit', 
                        minute: '2-digit' 
                      })}
                    </p>
                    <p className="text-xs text-gray-500">
                      {flight.status || "Scheduled"}
                    </p>
                  </>
                ) : (
                  <p className="text-sm text-gray-500">Time TBD</p>
                )}
              </div>
            </div>
          ))}
          {departures.length > 10 && (
            <p className="text-sm text-gray-500 text-center pt-2">
              Showing first 10 of {departures.length} departures
            </p>
          )}
        </div>
      </CardContent>
    </Card>
  )
}

export function AirportInfo({ onSearch, isLoading, airport, departures, error }: AirportInfoProps) {
  const [iataCode, setIataCode] = useState("")

  const handleSearch = () => {
    if (iataCode.trim()) {
      onSearch(iataCode.trim().toUpperCase())
    }
  }

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === "Enter") {
      handleSearch()
    }
  }

  return (
    <div className="space-y-6">
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center space-x-2">
            <Search className="h-5 w-5" />
            <span>Airport Information</span>
          </CardTitle>
          <CardDescription>
            Enter an airport IATA code to get detailed information and live departures
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="flex space-x-2">
            <Input
              placeholder="Enter IATA code (e.g., JFK, LAX, LHR)"
              value={iataCode}
              onChange={(e) => setIataCode(e.target.value.toUpperCase())}
              onKeyPress={handleKeyPress}
              maxLength={3}
              className="flex-1"
            />
            <Button 
              onClick={handleSearch} 
              disabled={!iataCode.trim() || isLoading}
            >
              {isLoading ? (
                <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white" />
              ) : (
                <Search className="h-4 w-4" />
              )}
            </Button>
          </div>
          
          <div className="text-sm text-gray-600 bg-gray-50 p-3 rounded-lg">
            <p className="font-medium mb-1">Popular airports to try:</p>
            <div className="grid grid-cols-2 md:grid-cols-4 gap-2">
              {["JFK", "LAX", "LHR", "CDG", "NRT", "DXB", "SIN", "FRA"].map((code) => (
                <button
                  key={code}
                  onClick={() => {
                    setIataCode(code)
                    onSearch(code)
                  }}
                  className="text-left hover:text-blue-600 transition-colors"
                >
                  {code}
                </button>
              ))}
            </div>
          </div>
        </CardContent>
      </Card>

      {isLoading && (
        <Card>
          <CardContent className="flex items-center justify-center py-12">
            <div className="text-center space-y-4">
              <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto" />
              <p className="text-gray-600">Loading airport information...</p>
            </div>
          </CardContent>
        </Card>
      )}

      {error && (
        <Card>
          <CardContent className="flex items-center justify-center py-12">
            <div className="text-center space-y-4">
              <div className="rounded-full bg-red-100 p-3 w-16 h-16 flex items-center justify-center mx-auto">
                <Building2 className="h-8 w-8 text-red-600" />
              </div>
              <div>
                <p className="text-lg font-medium text-gray-900">Airport Not Found</p>
                <p className="text-gray-600 max-w-md">{error}</p>
              </div>
            </div>
          </CardContent>
        </Card>
      )}

      {airport && (
        <div className="space-y-6">
          <AirportDetails airport={airport} />
          <DeparturesList departures={departures || []} />
        </div>
      )}
    </div>
  )
}
